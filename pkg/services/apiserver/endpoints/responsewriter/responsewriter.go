package responsewriter

import (
	"bufio"
	"context"
	"fmt"
	"io"
	"net"
	"net/http"

	"k8s.io/apiserver/pkg/endpoints/responsewriter"
)

var _ responsewriter.CloseNotifierFlusher = (*ResponseAdapter)(nil)
var _ responsewriter.UserProvidedDecorator = (*ResponseAdapter)(nil)

// ResponseAdapter is an implementation of [http.ResponseWriter] that allows conversion to a [http.Response].
type ResponseAdapter struct {
	ctx    context.Context
	res    *http.Response
	reader io.Reader
	writer io.WriteCloser
}

// NewAdapter returns an initialized [ResponseAdapter].
func NewAdapter(ctx context.Context) *ResponseAdapter {
	r, w := io.Pipe()
	return &ResponseAdapter{
		ctx: ctx,
		res: &http.Response{
			Proto:      "HTTP/1.1",
			ProtoMajor: 1,
			ProtoMinor: 1,
			Header:     make(http.Header),
			Body:       io.NopCloser(r),
		},
		reader: r,
		writer: w,
	}
}

// Header implements [http.ResponseWriter].
// It returns the response headers to mutate within a handler.
func (ra *ResponseAdapter) Header() http.Header {
	return ra.res.Header
}

// Write implements [http.ResponseWriter].
func (ra *ResponseAdapter) Write(buf []byte) (int, error) {
	return ra.writer.Write(buf)
}

// WriteHeader implements [http.ResponseWriter].
func (ra *ResponseAdapter) WriteHeader(code int) {
	ra.res.StatusCode = code
	ra.res.Status = fmt.Sprintf("%03d %s", code, http.StatusText(code))
}

// Flush implements [http.Flusher].
func (ra *ResponseAdapter) Flush() {}

// Response returns the [http.Response] generated by the [http.Handler].
func (ra *ResponseAdapter) Response() *http.Response {
	return ra.res
}

// Decorate implements [responsewriter.UserProvidedDecorator].
func (ra *ResponseAdapter) Unwrap() http.ResponseWriter {
	return ra
}

// CloseNotify implements [http.CloseNotifier].
func (ra *ResponseAdapter) CloseNotify() <-chan bool {
	ch := make(chan bool)
	go func() {
		<-ra.ctx.Done()
		ch <- true
	}()
	return ch
}

// Hijack implements [http.Hijacker].
func (ra *ResponseAdapter) Hijack() (net.Conn, *bufio.ReadWriter, error) {
	return nil, nil, nil
}

func (ra *ResponseAdapter) Close() error {
	return ra.writer.Close()
}
